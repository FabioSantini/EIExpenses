// Simplified Prisma schema for EI-Expenses
// This schema defines the core data structure for expense tracking and Excel export

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User model - basic authentication
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  expenseReports ExpenseReport[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([email])
}

// ExpenseReport - Container for expense lines (typically monthly)
model ExpenseReport {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  title        String        // e.g., "January 2025 Expenses"
  month        Int           // 1-12
  year         Int           // e.g., 2025
  description  String?       // Optional notes
  expenseLines ExpenseLine[]
  exportedAt   DateTime?     // When Excel was last generated
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId, year, month])
  @@unique([userId, year, month])
}

// ExpenseLine - Individual expense item
model ExpenseLine {
  id              String        @id @default(cuid())
  reportId        String
  report          ExpenseReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Core expense fields
  date            DateTime
  type            String        // PARKING, FUEL, TELEPASS, LUNCH, DINNER, HOTEL, TRAIN, BREAKFAST, TOURIST_TAX, OTHER
  description     String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("EUR")
  
  // Receipt data
  receiptUrl      String?       // Azure Blob Storage URL
  ocrProcessed    Boolean       @default(false)
  ocrData         Json?         // Raw OCR extraction results
  
  // Type-specific metadata (stored as JSON for flexibility)
  // For FUEL: { startLocation, endLocation, kilometers }
  // For LUNCH/DINNER/BREAKFAST: { customer, colleagues[] }
  // For HOTEL: { nights, location }
  metadata        Json?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([reportId, date])
  @@index([type])
}

// Simplified helper tables - just for autocomplete suggestions
// These are populated automatically from expense history

model CustomerSuggestion {
  id        String   @id @default(cuid())
  name      String   @unique
  usageCount Int     @default(1)
  lastUsed  DateTime @default(now())

  @@index([name])
}

model ColleagueSuggestion {
  id        String   @id @default(cuid())
  name      String   @unique
  usageCount Int     @default(1)
  lastUsed  DateTime @default(now())

  @@index([name])
}